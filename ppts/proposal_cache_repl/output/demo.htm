<!--
    Powered By nodePPT - This is probably the best web presentation tool so far!
    version: 1.4.2
    site: https://github.com/ksky521/nodePPT
    date: 
-->
<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Cache Replacement Project - By Jipeng Wu</title>
    <link rel="stylesheet" media="all" href="./css/nodeppt.css">
    <link rel="stylesheet" media="only screen and (max-device-width: 480px)" href="./css/phone.css">
    
    <link rel="stylesheet" href="./js/highlight/styles/monokai_sublime.css">
    <link rel="stylesheet" href="./css/font-awesome.css">
    
<link rel="stylesheet" href="./css/theme.dark.css">
</head>
<body>
<div class="slides">
    <slides id="container">
        <slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>A Frequent-Pattern-Aware Harware Prefecher</h1>
<h2>Jipeng Wu</h2>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>Background: Why Prefetching?</h2>

</hgroup><article>

<img src="./img/system-dram.png" alt="system-dram">
<ul class="zoomIn">
<li>SRAM can keep pace with processor memory request rates.</li>
<li>LLC miss latency continues as a significent bottleneck.</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>Background: Why Prefetching?</h2>

</hgroup><article>

<ul class="zoomIn">
<li>A program working on a large array. <ul>
<li>Caching policies are defeated by such programs with low locality.</li>
</ul>
</li>
<li>A data block in that array is constantly referenced and updated.<ul>
<li>Such capacity miss can be avoided by fectching before referenced in parallel with processor computation.</li>
</ul>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>Existing prefechers</h2>

</hgroup><article>

<ul class="zoomIn">
<li>Access Map Pattern Matching(AMPM): <ul>
<li>Per cache line structure(untouched, demand， accessed, prefetched);</li>
<li>AMPM only detects strides.</li>
</ul>
</li>
<li>Spatial Memory Streaming(SMS):<ul>
<li>AGT(Active Generation Table): AGT entries are spatial pattern bitmaps.</li>
<li>PHT(Pattern History Table): when a AGT entry evicted, it&#39;s placed in PHT.</li>
<li>The PC+offset of the load instruction are used to look up the PHT. If there is a match, data blocks indicated by PHT entry&#39;s bitmap will be prefeched.</li>
</ul>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>Existing prefechers</h2>

</hgroup><article>

<ul>
<li>Variable-Length Delta Prefecher(VLDP):<ul>
<li>VLDP captures variable-length delta patterns rather than fixed-length strides.</li>
<li>Standalone buffers: Per-page Delta History Buffer, Delta Prediction Tables, Offset Prediction Tables.</li>
</ul>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>FPA Goal</h2>

</hgroup><article>

<ul class="zoomIn">
<li>Detecting more general data patterns.</li>
<li>129KB Storage Budget for a 1MB LLC.</li>
<li>Choose a proper tradeoff between coverage/traning time/complexity and accuracy based on simulation results.</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>How to track history</h2>

</hgroup><article>

<ul class="zoomIn">
<li>The Global History Buffer: <ul>
<li>The GHB is a circular buffer, and each cache miss adds a new entry to the buffer.</li>
<li>The index table points to the most recent occurrence of PC in global history.</li>
<li>Therefore GHB can be looked up by PC. But the history length is 1 and this method replies on PC.</li>
</ul>
</li>
<li>AMMP&#39;s Per cache line based history:<ul>
<li>Each cache line assigned with 2 bits to indicate its state: untouched, demand accessed, prefetched.</li>
<li>It&#39;s not really a history buffer. It requires a walkthrough of adjacent cache lines</li>
</ul>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>How to track history</h2>

</hgroup><article>

<ul class="zoomIn">
<li>VLDP&#39;s Page-based design:<ul>
<li>DHB Entry: (i) page number(ii) page offset of the last address accessed in this page, (iii) sequence of up to 4 recently observed deltas, (iv) the DPT level used for the latest delta prediction, (v) the number of times this page has been used, and (vi) 4 recently prefetched offsets.</li>
</ul>
</li>
<li>FPA design: I plan to setup a global history buffer in LLC that tracks fixed-length delata seuqences.</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>Delta patterns</h2>

</hgroup><article>

<p>Since a data access pattern can repeat across different regions of memory, it&#39;s reasonable to combine different address sequences that has the same delta pattern.</p>
<ul class="zoomIn">
<li><p>Address Sequence S1: {A, A+1,A+4,A+3,A-2}</p>
<p>Address Sequence S2: {B, B-1,B+3,B+1,B-1,B+5}</p>
<p>Address Sequence S3: {C, C+1,C+4,C+3,C-2}</p>
</li>
<li><p>{S1,S2,S3} -&gt; {{0,1,4,3,-2}, {0,-1,3,1,-1,5}}</p>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>How to elicit better patterns?</h2>

</hgroup><article>

<ul>
<li>Fp-growth is a lightweight frequent pattern capture method. Its fp-tree is known as one of the most compact data structure in big data analytics area.</li>
<li>It might be still too complicated for hardware prefechers. I need to make a trade-off decision between completeness of pattern capture and the complexity of implementation.</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>How to elicit better patterns?</h2>

</hgroup><article>

<img src="./img/fpa.jpg" alt="fp-tree">

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>Simulation Environment</h2>

</hgroup><article>

<ul class="zoomIn">
<li>Simulator: CMPSIM</li>
<li>3 layer cache model + out-of-order 8-stage pipeline</li>
<li>Non-inclusive virtual address LLC: 16K cache lines</li>
<li>Cache line size: 64B</li>
<li>Reserved bits per cache line: 8 bits</li>
<li>Storage budget: 16K*8+1K=129K</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><hgroup>
<h2>Workload and Performance Evaluation</h2>

</hgroup><article>

<ul class="zoomIn">
<li>Single-threaded workload generated by pin tool.</li>
<li>Comparing FPA with AMPM(Access Map Pattern Matching) and SMS(Spatial Memory Streaming).</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>Thanks!</h1>

</article></section></slide>
        

        <!-- <slide class="slide logoslide dark nobackground">
            <article class="flexbox vcenter">
                <h2 style="color: white;">Powered By nodePPT v1.4.2</h2>
            </article>
        </slide> -->
        <div class="slideTip" id="tip"></div>
    </slides>
</div>
<canvas id="drawBoard" class="draw-board" width="900" height="700"></canvas>
<div class="progress"><span id="progress"></span></div>
<div id="_buttons">
    <div class="_btn-box" id="_btn-box" style="display:none;">
        <button class="fa fa-arrow-circle-left" id="_btn-prev"></button>
        <button class="fa fa-arrow-circle-right" id="_btn-next"></button>
        <button class="fa fa-paint-brush" id="_btn-brush"></button>
        <button class="fa fa-compress" id="_btn-overview" data-toggle="fa fa-expand"></button>
    </div>
    <button class="fa fa-bars" id="_btn-bar"  data-toggle="fa fa-close"></button>
</div>
<script src="./js/mixjs/lib/mix.0.3.0.min.js"></script>
<script>
var base = location.protocol + '//' + location.host;

var path = (location.pathname + '#').split('/').filter(function(v){
    return !!v;
});
path.pop();
path = path.join('/');
MixJS.config({
    baseURL: [ base, path, 'js'].join('/')+'/'
});

</script>
<script src="./js/mixjs/lib/event/broadcast.js"></script>
<script src="./js/nodeppt.js"></script>
<script>
Slide.init({
    containerID: 'container',
    drawBoardID: 'drawBoard',
    slideClass: '.slide',
    buildClass: '.build',
    progressID: 'progress',
    transition: 'vertical3d',
    width: 1100,
    dir: './',
    
    //打开下面的注释就开启postMessage方式
    //访问网址127.0.0.1:8080/ppt/demo#client
    control:{
        type: 'postMessage',
        args:{
            isControl:  false
        }
    },
    
    tipID: 'tip'
});
MixJS.loadJS('highlight/highlight.pack.js',function(){
    hljs.tabReplace = '  ';
    hljs.initHighlightingOnLoad();
});
</script>
<script src="./js/demo.js"></script>
<link rel="stylesheet" href="./css/demo.css">
<script src="./js/zoom.js"></script>

<!--placeholder-->
</body>
</html>
